require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/todo_items' do
  # This should return the minimal set of attributes required to create a valid
  # TodoItem. As you add validations to TodoItem, be sure to
  # adjust the attributes here as well.
  let(:todo_list) { create(:todo_list) }
  let(:valid_attributes) do
    attributes_for(:todo_item).merge(todo_list_id: todo_list.id)
  end

  let(:invalid_attributes) do
    attributes_for(:todo_item, description: nil)
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_todo_list_todo_item_url(todo_list)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      todo_item = TodoItem.create! valid_attributes
      get edit_todo_list_todo_item_url(todo_list, todo_item)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new TodoItem' do
        expect do
          post todo_list_todo_items_url(todo_list), params: { todo_item: valid_attributes }
        end.to change(TodoItem, :count).by(1)
      end

      it 'redirects to the created todo_item' do
        post todo_list_todo_items_url(todo_list.id), params: { todo_item: valid_attributes }

        expect(response).to redirect_to(todo_list_url(todo_list))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new TodoItem' do
        expect do
          post todo_list_todo_items_url(todo_list), params: { todo_item: invalid_attributes }
        end.not_to change(TodoItem, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post todo_list_todo_items_url(todo_list), params: { todo_item: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes_for(:todo_item)
      end

      it 'updates the requested todo_item' do
        todo_item = TodoItem.create! valid_attributes
        patch todo_list_todo_item_url(todo_list, todo_item), params: { todo_item: new_attributes }
        todo_item.reload
        expect(todo_item.description).to eq new_attributes[:description]
      end

      it 'redirects to the todo_item' do
        todo_item = TodoItem.create! valid_attributes
        patch todo_list_todo_item_url(todo_list, todo_item), params: { todo_item: new_attributes }
        expect(response).to have_http_status(:ok)
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        todo_item = TodoItem.create! valid_attributes
        patch todo_list_todo_item_url(todo_list, todo_item), params: { todo_item: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested todo_item' do
      todo_item = TodoItem.create! valid_attributes
      expect do
        delete todo_list_todo_item_url(todo_list, todo_item)
      end.to change(TodoItem, :count).by(-1)
    end

    it 'redirects to the todo_items list' do
      todo_item = TodoItem.create! valid_attributes
      delete todo_list_todo_item_url(todo_list, todo_item)
      expect(response).to have_http_status(:ok)
    end
  end
end
